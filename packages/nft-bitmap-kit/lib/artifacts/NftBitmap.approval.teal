#pragma version 10

// This TEAL was generated by TEALScript v0.96.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
//
// Create the application with the default image
createApplication:
	proto 0 0

	// src/NftBitmap.algo.ts:19
	// this.image(0).value = row
	byte 0x0000000000000000
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:20
	// this.image(1).value = row
	byte 0x0000000000000001
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:21
	// this.image(2).value = row
	byte 0x0000000000000002
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:22
	// this.image(3).value = row
	byte 0x0000000000000003
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:23
	// this.image(4).value = row
	byte 0x0000000000000004
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:24
	// this.image(5).value = row
	byte 0x0000000000000005
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:25
	// this.image(6).value = row
	byte 0x0000000000000006
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:26
	// this.image(7).value = row
	byte 0x0000000000000007
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:27
	// this.image(8).value = row
	byte 0x0000000000000008
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:28
	// this.image(9).value = row
	byte 0x0000000000000009
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:29
	// this.image(10).value = row
	byte 0x000000000000000a
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:30
	// this.image(11).value = row
	byte 0x000000000000000b
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:31
	// this.image(12).value = row
	byte 0x000000000000000c
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:32
	// this.image(13).value = row
	byte 0x000000000000000d
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:33
	// this.image(14).value = row
	byte 0x000000000000000e
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:34
	// this.image(15).value = row
	byte 0x000000000000000f
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:35
	// this.image(16).value = row
	byte 0x0000000000000010
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:36
	// this.image(17).value = row
	byte 0x0000000000000011
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:37
	// this.image(18).value = row
	byte 0x0000000000000012
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:38
	// this.image(19).value = row
	byte 0x0000000000000013
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:39
	// this.image(20).value = row
	byte 0x0000000000000014
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:40
	// this.image(21).value = row
	byte 0x0000000000000015
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:41
	// this.image(22).value = row
	byte 0x0000000000000016
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:42
	// this.image(23).value = row
	byte 0x0000000000000017
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:43
	// this.image(24).value = row
	byte 0x0000000000000018
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:44
	// this.image(25).value = row
	byte 0x0000000000000019
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:45
	// this.image(26).value = row
	byte 0x000000000000001a
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:46
	// this.image(27).value = row
	byte 0x000000000000001b
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:47
	// this.image(28).value = row
	byte 0x000000000000001c
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:48
	// this.image(29).value = row
	byte 0x000000000000001d
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:49
	// this.image(30).value = row
	byte 0x000000000000001e
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:50
	// this.image(31).value = row
	byte 0x000000000000001f
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:51
	// this.image(32).value = row
	byte 0x0000000000000020
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:52
	// this.image(33).value = row
	byte 0x0000000000000021
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:53
	// this.image(34).value = row
	byte 0x0000000000000022
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:54
	// this.image(35).value = row
	byte 0x0000000000000023
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:55
	// this.image(36).value = row
	byte 0x0000000000000024
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:56
	// this.image(37).value = row
	byte 0x0000000000000025
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:57
	// this.image(38).value = row
	byte 0x0000000000000026
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:58
	// this.image(39).value = row
	byte 0x0000000000000027
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:59
	// this.image(40).value = row
	byte 0x0000000000000028
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:60
	// this.image(41).value = row
	byte 0x0000000000000029
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:61
	// this.image(42).value = row
	byte 0x000000000000002a
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:62
	// this.image(43).value = row
	byte 0x000000000000002b
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:63
	// this.image(44).value = row
	byte 0x000000000000002c
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:64
	// this.image(45).value = row
	byte 0x000000000000002d
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:65
	// this.image(46).value = row
	byte 0x000000000000002e
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:66
	// this.image(47).value = row
	byte 0x000000000000002f
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:67
	// this.image(48).value = row
	byte 0x0000000000000030
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:68
	// this.image(49).value = row
	byte 0x0000000000000031
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:69
	// this.image(50).value = row
	byte 0x0000000000000032
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:70
	// this.image(51).value = row
	byte 0x0000000000000033
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:71
	// this.image(52).value = row
	byte 0x0000000000000034
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:72
	// this.image(53).value = row
	byte 0x0000000000000035
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:73
	// this.image(54).value = row
	byte 0x0000000000000036
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:74
	// this.image(55).value = row
	byte 0x0000000000000037
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:75
	// this.image(56).value = row
	byte 0x0000000000000038
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:76
	// this.image(57).value = row
	byte 0x0000000000000039
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:77
	// this.image(58).value = row
	byte 0x000000000000003a
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:78
	// this.image(59).value = row
	byte 0x000000000000003b
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:79
	// this.image(60).value = row
	byte 0x000000000000003c
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:80
	// this.image(61).value = row
	byte 0x000000000000003d
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:81
	// this.image(62).value = row
	byte 0x000000000000003e
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put

	// src/NftBitmap.algo.ts:82
	// this.image(63).value = row
	byte 0x000000000000003f
	byte "01020304050607080910111213141516171819202122232425262728293031323130292827262524"
	app_global_put
	retsub

// updateApplication()void
*abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	int 1
	return

// updateApplication(): void
//
// Update the application
updateApplication:
	proto 0 0

	// src/NftBitmap.algo.ts:89
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
//
// Delete the application
deleteApplication:
	proto 0 0

	// src/NftBitmap.algo.ts:96
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert
	retsub

// _ascii_to_int(x: uint64): uint64
//
// Ascii number to integer
// @param x
// @see https://github.com/algorand/pyteal-utils/blob/main/pytealutils/strings/string.py
// @private
_ascii_to_int:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// src/NftBitmap.algo.ts:107
	// ascii_nine = ascii_zero + 9
	int 57
	frame_bury 0 // ascii_nine: uint64

	// src/NftBitmap.algo.ts:108
	// assert(x >= ascii_zero)
	frame_dig -1 // x: uint64
	int 48
	>=
	assert

	// src/NftBitmap.algo.ts:109
	// assert(x <= ascii_nine)
	frame_dig -1 // x: uint64
	frame_dig 0 // ascii_nine: uint64
	<=
	assert

	// src/NftBitmap.algo.ts:110
	// return x - ascii_zero;
	frame_dig -1 // x: uint64
	int 48
	-

	// set the subroutine return value
	frame_bury 0
	retsub

// _int_to_ascii(x: uint64): string
//
// Convert an integer to an ASCII character
// @param x
// @private
_int_to_ascii:
	proto 1 1

	// src/NftBitmap.algo.ts:119
	// return extract3("0123456789", x, 1);
	byte 0x30313233343536373839 // "0123456789"
	frame_dig -1 // x: uint64
	int 1
	extract3
	retsub

// _pow10(x: uint64): uint64
//
// Calculate 10^x
// @param x
// @private
_pow10:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// src/NftBitmap.algo.ts:128
	// value = 1
	int 1
	frame_bury 0 // value: uint64

	// src/NftBitmap.algo.ts:130
	// for (let i = 0; i < x; i = i + 1)
	int 0
	frame_bury 1 // i: uint64

*for_0:
	// src/NftBitmap.algo.ts:130
	// i < x
	frame_dig 1 // i: uint64
	frame_dig -1 // x: uint64
	<
	bz *for_0_end

	// src/NftBitmap.algo.ts:131
	// value = value * 10
	frame_dig 0 // value: uint64
	int 10
	*
	frame_bury 0 // value: uint64

*for_0_continue:
	// src/NftBitmap.algo.ts:130
	// i = i + 1
	frame_dig 1 // i: uint64
	int 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// src/NftBitmap.algo.ts:133
	// return value;
	frame_dig 0 // value: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// _atoi(x: string): uint64
//
// Convert a string to an integer
// @param x
// @private
_atoi:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// src/NftBitmap.algo.ts:142
	// length = len(x)
	frame_dig -1 // x: string
	len
	frame_bury 0 // length: uint64

	// *if0_condition
	// src/NftBitmap.algo.ts:143
	// length > 0
	frame_dig 0 // length: uint64
	int 0
	>
	bz *if0_else

	// *if0_consequent
	// src/NftBitmap.algo.ts:144
	// return (
	//         this._ascii_to_int(getbyte(x, 0)) * this._pow10(length - 1) +
	//         this._atoi(substring3(x, 1, length))
	//       );
	frame_dig -1 // x: string
	int 0
	getbyte
	callsub _ascii_to_int
	frame_dig 0 // length: uint64
	int 1
	-
	callsub _pow10
	*
	frame_dig -1 // x: string
	int 1
	frame_dig 0 // length: uint64
	substring3
	callsub _atoi
	+
	b *_atoi*return
	b *if0_end

*if0_else:
	// src/NftBitmap.algo.ts:149
	// return 0;
	int 0
	b *_atoi*return

*if0_end:

*_atoi*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// _itoa(x: uint64): string
//
// Convert an integer to a string
// @param x
// @private
_itoa:
	proto 1 1

	// *if1_condition
	// src/NftBitmap.algo.ts:159
	// x > 0
	frame_dig -1 // x: uint64
	int 0
	>
	bz *if1_else

	// *if1_consequent
	// src/NftBitmap.algo.ts:160
	// return concat(
	//         x / 10 > 0 ? this._itoa(x / 10) : "",
	//         this._int_to_ascii(x % 10),
	//       );
	frame_dig -1 // x: uint64
	int 10
	/
	int 0
	>
	bz *ternary0_false
	frame_dig -1 // x: uint64
	int 10
	/
	callsub _itoa
	b *ternary0_end

*ternary0_false:
	byte 0x // ""

*ternary0_end:
	frame_dig -1 // x: uint64
	int 10
	%
	callsub _int_to_ascii
	concat
	retsub
	b *if1_end

*if1_else:
	// src/NftBitmap.algo.ts:165
	// return "0";
	byte 0x30 // "0"
	retsub

*if1_end:
	retsub

// itoa(uint64)string
*abi_route_itoa:
	// The ABI return prefix
	byte 0x151f7c75

	// x: uint64
	txna ApplicationArgs 1
	btoi

	// execute itoa(uint64)string
	callsub itoa
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// itoa(x: uint64): string
//
// Convert an integer to a string
// @param x
itoa:
	proto 1 1

	// src/NftBitmap.algo.ts:174
	// return this._itoa(x);
	frame_dig -1 // x: uint64
	callsub _itoa
	retsub

// atoi(string)uint64
*abi_route_atoi:
	// The ABI return prefix
	byte 0x151f7c75

	// x: string
	txna ApplicationArgs 1
	extract 2 0

	// execute atoi(string)uint64
	callsub atoi
	itob
	concat
	log
	int 1
	return

// atoi(x: string): uint64
//
// Convert a string to an integer
// @param x
atoi:
	proto 1 1

	// src/NftBitmap.algo.ts:182
	// return this._atoi(x);
	frame_dig -1 // x: string
	callsub _atoi
	retsub

// placeRow(uint64,string)void
*abi_route_placeRow:
	// row: string
	txna ApplicationArgs 2
	extract 2 0

	// y: uint64
	txna ApplicationArgs 1
	btoi

	// execute placeRow(uint64,string)void
	callsub placeRow
	int 1
	return

// placeRow(y: uint64, row: string): void
//
// Allow the creator to place a row
// @param y
// @param row
placeRow:
	proto 2 0

	// src/NftBitmap.algo.ts:191
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// src/NftBitmap.algo.ts:192
	// assert(y <= 64)
	frame_dig -1 // y: uint64
	int 64
	<=
	assert

	// src/NftBitmap.algo.ts:193
	// assert(len(row) === 80)
	frame_dig -2 // row: string
	len
	int 80
	==
	assert

	// src/NftBitmap.algo.ts:194
	// this.image(y).value = row
	frame_dig -1 // y: uint64
	itob
	frame_dig -2 // row: string
	app_global_put
	retsub

// place(uint64,uint64,uint64)void
*abi_route_place:
	// color: uint64
	txna ApplicationArgs 3
	btoi

	// y: uint64
	txna ApplicationArgs 2
	btoi

	// x: uint64
	txna ApplicationArgs 1
	btoi

	// execute place(uint64,uint64,uint64)void
	callsub place
	int 1
	return

// place(x: uint64, y: uint64, color: uint64): void
//
// Place a Pixel
// @param x - The x coordinate of the pixel
// @param y - The y coordinate of the pixel
// @param color - The color of the pixel
place:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// src/NftBitmap.algo.ts:205
	// assert(color > 0 && color <= 40)
	frame_dig -3 // color: uint64
	int 0
	>
	dup
	bz *skip_and0
	frame_dig -3 // color: uint64
	int 40
	<=
	&&

*skip_and0:
	assert

	// src/NftBitmap.algo.ts:209
	// rowValue = this.image(x).value
	frame_dig -1 // x: uint64
	itob
	app_global_get
	frame_bury 0 // rowValue: byte[]

	// src/NftBitmap.algo.ts:211
	// this.image(x).value = concat(
	//       // Add preceding values with color
	//       concat(
	//         substring3(rowValue, 0, y * 2),
	//         // Under 10, we need to add a leading 0
	//         concat(color < 10 ? "0" : "", this._itoa(color)),
	//       ),
	//       // Remaining values
	//       substring3(rowValue, y * 2 + 2, 80),
	//     )
	frame_dig -1 // x: uint64
	itob
	frame_dig 0 // rowValue: byte[]
	int 0
	frame_dig -2 // y: uint64
	int 2
	*
	substring3
	frame_dig -3 // color: uint64
	int 10
	<
	bz *ternary1_false
	byte 0x30 // "0"
	b *ternary1_end

*ternary1_false:
	byte 0x // ""

*ternary1_end:
	frame_dig -3 // color: uint64
	callsub _itoa
	concat
	concat
	frame_dig 0 // rowValue: byte[]
	frame_dig -2 // y: uint64
	int 2
	*
	int 2
	+
	int 80
	substring3
	concat
	app_global_put
	retsub

// get(uint64,uint64)uint64
*abi_route_get:
	// The ABI return prefix
	byte 0x151f7c75

	// y: uint64
	txna ApplicationArgs 2
	btoi

	// x: uint64
	txna ApplicationArgs 1
	btoi

	// execute get(uint64,uint64)uint64
	callsub get
	itob
	concat
	log
	int 1
	return

// get(x: uint64, y: uint64): uint64
//
// Get the color of a pixel
// @param x
// @param y
get:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// src/NftBitmap.algo.ts:229
	// assert(x <= 40)
	frame_dig -1 // x: uint64
	int 40
	<=
	assert

	// src/NftBitmap.algo.ts:230
	// assert(y <= 64)
	frame_dig -2 // y: uint64
	int 64
	<=
	assert

	// src/NftBitmap.algo.ts:232
	// xValue = x - 1
	frame_dig -1 // x: uint64
	int 1
	-
	frame_bury 0 // xValue: uint64

	// src/NftBitmap.algo.ts:233
	// yValue = y - 1
	frame_dig -2 // y: uint64
	int 1
	-
	frame_bury 1 // yValue: uint64

	// src/NftBitmap.algo.ts:235
	// return this._atoi(
	//       substring3(this.image(xValue).value, yValue * 2, yValue * 2 + 2),
	//     );
	frame_dig 0 // xValue: uint64
	itob
	app_global_get
	frame_dig 1 // yValue: uint64
	int 2
	*
	frame_dig 1 // yValue: uint64
	int 2
	*
	int 2
	+
	substring3
	callsub _atoi

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "itoa(uint64)string"
	method "atoi(string)uint64"
	method "placeRow(uint64,string)void"
	method "place(uint64,uint64,uint64)void"
	method "get(uint64,uint64)uint64"
	txna ApplicationArgs 0
	match *abi_route_itoa *abi_route_atoi *abi_route_placeRow *abi_route_place *abi_route_get

	// this contract does not implement the given ABI method for call NoOp
	err

*call_UpdateApplication:
	method "updateApplication()void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication

	// this contract does not implement the given ABI method for call UpdateApplication
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err